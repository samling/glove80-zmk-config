/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */
/* Include all behaviour includes needed */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define LAYER_Base 0
#define LAYER_Numpad 1
#define LAYER_Media 2
#define LAYER_Symbols 3
#define LAYER_Game 4
#define LAYER_GameContd 5
#define LAYER_Magic 6

/* To deal with the situation where there is no Lower layer, to keep &lower happy */

#ifndef LAYER_Lower

#define LAYER_Lower 0

#endif

/* Custom Device-tree */

&caps_word {
    continue-list = <
    UNDERSCORE MINUS
    BACKSPACE DELETE
    N1 N2 N3 N4 N5 N6 N7 N8 N9 N9 N0
    >;
};

&sl { release-after-ms = <1000>; };

&sk {
    release-after-ms = <1500>;
    quick-release;
};

/* Glove80 system behavior & macros */

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD

    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };

        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };

        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };

        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };

    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    #else

    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    #endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */

#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */

/ {
    macros {
        // Sends ctrl-a

        tmux_scroll: tmux_scroll {
            label = "tmux_scroll";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings = <&kp LC(A) &kp LBKT>;
        };

        // Sends "../"

        up_directory: up_directory {
            label = "up_directory";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp DOT &kp DOT &kp SLASH>;
        };

        // Sends {} followed by left arrow

        brackets_pair: brackets_pair {
            label = "brackets_pair";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LBKT &kp RBKT &kp LEFT>;
        };

        // Sends [] followed by left arrow

        braces_pair: braces_pair {
            label = "braces_pair";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LS(LBKT) &kp LS(RBKT) &kp LEFT>;
        };

        // Sends () followed by left arrow

        parens_pair: parens_pair {
            label = "parens_pair";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LPAR &kp RPAR &kp LEFT>;
        };

        // Sends <> followed by left arrow

        lt_gt_pair: lt_gt_pair {
            label = "lt_gt_pair";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LT &kp GT &kp LEFT>;
        };

        // Writes a helm-style comment and places cursor in the center: {{- /* | */ -}}

        helm_comment_multi_line: helm_comment {
            label = "helm_comment";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LS(LBKT) &kp LS(LBKT) &kp SLASH &kp STAR &kp STAR &kp SLASH &kp LS(RBKT) &kp LS(RBKT) &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp ENTER &kp ENTER &kp UP_ARROW>;
        };

        triple_grave: triple_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "TRIPLE_GRAVE";
        };

        slash_comment: slash_comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp FSLH &kp SPACE>;
            label = "SLASH_COMMENT";
        };

        helm_comment_single_line: helm_comment_single_line {
            compatible = "zmk,behavior-macro";
            label = "HELM_COMMENT_SINGLE_LINE";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LS(LBKT) &kp LS(LBKT) &kp MINUS &kp SPACE &kp SLASH &kp STAR &kp SPACE &kp SPACE &kp STAR &kp SLASH &kp SPACE &kp MINUS &kp LS(RBKT) &kp LS(RBKT) &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT>;
        };

        helm_func: helm_func {
            compatible = "zmk,behavior-macro";
            label = "HELM_FUNC";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LS(LBKT) &kp LS(LBKT) &kp MINUS &kp SPACE &kp SPACE &kp MINUS &kp LS(RBKT) &kp LS(RBKT) &kp LEFT &kp LEFT &kp LEFT &kp LEFT>;
        };

        go_declare: go_declare {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL &kp SPACE>;
            label = "GO_DECLARE";
        };

        bash_declare: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp POUND &kp EXCL>;
            label = "NEW_MACRO";
        };

        go_empty_set: go_empty_set {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DLLR &kp UNDER &kp SPACE>;
            label = "GO_EMPTY_SET";
        };

        go_not_equal: go_not_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL &kp SPACE>;
            label = "GO_NOT_EQUAL";
        };
    };

    behaviors {
        // Send regular shift on tap, enable CAPSWORD on double-tap

        shift_capsword: shift_capsword {
            label = "SHIFT_CAPSWORD";
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHIFT>, <&caps_word>;
        };

        // Send tab on tap, send ctrl-alt-tab on double-tap

        auto_tab: auto_tab {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <350>;
            quick_tap_ms = <0>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        // Momentary layer on hold, sticky layer on tap

        #define MO_SL(layer) &mo_sl layer

        sl_tap_hold_symbols: sl_tap_hold_symbols {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&sl_toggle_symbols>;

            label = "SL_TAP_HOLD_SYMBOLS";
            quick-tap-ms = <200>;
        };

        stickyshift_tap_hold: stickyshift_tap_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKYSHIFT_TAP_HOLD";
            bindings = <&kp>, <&sk_shift>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
        };

        sk_shift: sk_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "SK_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;
        };

        sl_toggle_symbols: sl_toggle_symbols {
            compatible = "zmk,behavior-tap-dance";
            label = "SL_TOGGLE_SYMBOLS";
            #binding-cells = <0>;
            bindings = <&sl 2>, <&to 2>;
        };

        sl_toggle_numpad: sl_toggle_numpad {
            compatible = "zmk,behavior-tap-dance";
            label = "SL_TOGGLE_NUMPAD";
            #binding-cells = <0>;
            bindings = <&sl 1>, <&to 1>;
        };

        layer_mo_tog: layer_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_MO_TOG";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        capsword_tap_toggle: capsword_tap_toggle {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPSWORD_TAP_TOGGLE";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        sl_tap_hold_numpad: sl_tap_hold_numpad {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&sl_toggle_numpad>;

            label = "SL_TAP_HOLD_NUMPAD";
            quick-tap-ms = <200>;
        };

        hyper_meh_tapdance: hyper_meh_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "HYPER_MEH_TAPDANCE";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LEFT_SHIFT))>, <&kp LA(LC(LEFT_GUI))>;
        };

        layer_mo_sl: layer_mo_sl {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_MO_SL";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tmux_leader_scroll: tmux_leader_scroll {
            compatible = "zmk,behavior-tap-dance";
            label = "TMUX_LEADER_SCROLL";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp LC(A)>, <&tmux_scroll>;
        };

        mt_quicktapterm: mt_quicktapterm {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_QUICKTAPTERM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            flavor = "hold-preferred";
        };

        ht_100ms: ht_100ms {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_100MS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
        };

        double_tap_to_game: double_tap_to_game {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLE_TAP_TO_GAME";
            #binding-cells = <0>;
            bindings = <&none>, <&to 4>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_updir {
            timeout-ms = <50>;
            key-positions = <61 62>; // "./"
            bindings = <&up_directory>;
        };

        combo_braces_pair {
            timeout-ms = <50>;
            key-positions = <25 26>; // "{}"
            bindings = <&braces_pair>;
            layers = <2>;
        };

        combo_brackets_pair {
            timeout-ms = <50>;
            key-positions = <49 50>; // "[]"
            bindings = <&brackets_pair>;
            layers = <2>;
        };

        combo_parens_pair {
            timeout-ms = <50>;
            key-positions = <37 38>; // "()"
            bindings = <&parens_pair>;
            layers = <2>;
        };

        combo_helm_comment_multi_line {
            timeout-ms = <50>;
            key-positions = <40 43 49>; // "HEL"
            bindings = <&helm_comment_multi_line>;
            layers = <2>;
        };

        combo_helm_comment_single_line {
            bindings = <&helm_comment_single_line>;
            key-positions = <40 43 36>;
            timeout-ms = <50>;
            layers = <2>;
        };

        combo_helm_func {
            bindings = <&helm_func>;
            key-positions = <40 43 38>;
            timeout-ms = <50>;
            layers = <2>;
        };

        combo_go_declare {
            bindings = <&go_declare>;
            key-positions = <52 39>;
            layers = <2>;
        };

        combo_go_empty_set {
            bindings = <&go_empty_set>;
            key-positions = <24 27>;
        };

        combo_lt_gt_pair_2 {
            bindings = <&lt_gt_pair>;
            key-positions = <67 68>;
            timeout-ms = <50>;
            layers = <2>;
        };

        combo_go_not_equal {
            bindings = <&go_not_equal>;
            key-positions = <52 36>;
            layers = <2>;
        };
    };
};

/* Automatically generated keymap */

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
&kp LS(LA(LC(DOT)))        &trans  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP                                                                                                                                                             &kp PRINTSCREEN  &trans     &kp CAPSLOCK  &kp DEL   &kp EQUAL
&kp GRAVE                  &kp N1  &kp N2      &kp N3        &kp N4        &kp N5                                                                                                                                             &kp N6  &kp N7           &kp N8     &kp N9        &kp N0    &kp BACKSLASH
&auto_tab LA(LC(TAB)) TAB  &kp Q   &kp W       &kp E         &kp R         &kp T                                                                                                                                              &kp Y   &kp U            &kp I      &kp O         &kp P     &kp MINUS
&mt LCTRL ESCAPE           &kp A   &kp S       &kp D         &kp F         &kp G                                                                                                                                              &kp H   &kp J            &kp K      &kp L         &kp SEMI  &kp SQT
&kp LSHIFT                 &kp Z   &kp X       &kp C         &kp V         &kp B   &sl_tap_hold_numpad 1 0  &mo 3                               &kp LC(W)            &kp LC(LS(T))        &none     &sl_tap_hold_symbols 2 3  &kp N   &kp M            &kp COMMA  &kp DOT       &kp FSLH  &kp RSHIFT
&magic 6 0                 &none   &none       &kp LGUI      &kp LALT              &kp RET                  &stickyshift_tap_hold LEFT_SHIFT 0  &tmux_leader_scroll  &tmux_leader_scroll  &kp BSPC  &kp SPACE                         &kp HOME         &kp PG_DN  &kp PG_UP     &kp END   &double_tap_to_game
            >;
        };

        layer_Numpad {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4         &kp F5                                                                               &kp F6     &kp F7           &kp F8        &kp F9        &kp F10
&trans  &none   &none   &none          &kp INS        &none                                                         &trans  &trans     &kp KP_MULTIPLY  &kp KP_SLASH  &kp KP_MINUS  &kp F11
&trans  &none   &none   &none          &none          &none                                                         &none   &kp KP_N7  &kp KP_N8        &kp KP_N9     &kp KP_PLUS   &kp F12
&trans  &none   &none   &none          &none          &none                                                         &none   &kp KP_N4  &kp KP_N5        &kp KP_N6     &kp KP_PLUS   &none
&trans  &none   &none   &kp LC(LS(C))  &kp LC(LS(V))  &none  &to 0   &trans  &trans  &kp KP_NUM  &trans  &kp KP_N0  &none   &kp KP_N1  &kp KP_N2        &kp KP_N3     &kp KP_ENTER  &trans
&trans  &none   &none   &none          &none                 &trans  &trans  &trans  &trans      &trans  &trans             &kp KP_N0  &kp KP_N0        &kp KP_DOT    &kp KP_ENTER  &trans
            >;
        };

        layer_Symbols {
            bindings = <
&trans         &trans    &trans         &trans                &trans                                                                                             &trans    &trans     &trans      &trans  &trans
&triple_grave  &trans    &trans         &trans                &trans                 &trans                                                            &trans    &trans    &trans     &trans      &trans  &trans
&trans         &trans    &kp DOLLAR     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp UNDER                                                         &trans    &kp N0    &kp CARET  &kp DOLLAR  &trans  &trans
&trans         &kp HASH  &kp EXCL       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON                                                         &kp LEFT  &kp DOWN  &kp UP     &kp RIGHT   &trans  &trans
&trans         &trans    &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE   &kp EQUAL    &trans    &trans  &trans  &trans  &to 0   &trans    &trans    &trans     &trans      &trans  &trans
&trans         &trans    &trans         &kp LESS_THAN         &kp GREATER_THAN                  &kp PERCENT  &kp STAR  &trans  &trans  &trans  &trans            &trans    &trans     &trans      &trans  &trans
            >;
        };

        layer_Windows {
            bindings = <
&trans  &kp LA(LC(LG(N1)))  &kp LA(LC(LG(N2)))  &kp LA(LC(LG(N3)))  &kp LA(LC(LG(N4)))                                                                                           &trans              &trans              &trans              &trans              &trans
&trans  &kp LS(LA(LC(N1)))  &kp LS(LA(LC(N2)))  &kp LS(LA(LC(N3)))  &kp LS(LA(LC(N4)))   &kp LS(LA(LC(N5)))                                                  &kp LS(LA(LC(N6)))  &kp LS(LA(LC(N7)))  &kp LS(LA(LC(N8)))  &kp LS(LA(LC(N9)))  &kp LS(LA(LC(N0)))  &trans
&trans  &trans              &trans              &trans              &kp LS(LA(LC(R)))    &trans                                                              &trans              &trans              &trans              &trans              &trans              &trans
&trans  &trans              &kp LC(LS(TAB))     &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)  &kp LC(TAB)                                                         &kp LS(LA(LC(H)))   &kp LS(LA(LC(J)))   &kp LS(LA(LC(K)))   &kp LS(LA(LC(L)))   &trans              &trans
&trans  &trans              &trans              &trans              &trans               &trans              &trans  &trans  &trans  &trans  &trans  &trans  &trans              &trans              &trans              &trans              &trans              &trans
&trans  &trans              &trans              &trans              &trans                                   &trans  &trans  &trans  &trans  &trans  &trans                      &trans              &trans              &trans              &trans              &trans
            >;
        };

        layer_Game {
            bindings = <
&kp F1   &kp F2     &kp F3  &kp F4  &kp F5                                                                      &trans  &trans  &trans  &trans  &trans
&kp ESC  &kp N1     &kp N2  &kp N3  &kp N4  &kp N5                                                      &trans  &trans  &trans  &trans  &trans  &trans
&none    &kp TAB    &kp Q   &kp W   &kp E   &kp R                                                       &trans  &trans  &trans  &trans  &trans  &trans
&none    &kp LCTRL  &kp A   &kp S   &kp D   &kp F                                                       &trans  &trans  &trans  &trans  &trans  &trans
&none    &kp LSHFT  &kp Z   &kp X   &kp C   &kp V   &mo 5      &kp I     &none  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans     &kp B   &kp N   &kp M           &kp SPACE  &kp LALT  &none  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &to 0
            >;
        };

        layer_GameContd {
            bindings = <
&kp F6   &kp F7  &kp F8  &kp F9  &kp F10                                                                  &trans  &trans  &trans  &trans  &trans
&kp ESC  &kp N6  &kp N7  &kp N8  &kp N9   &kp N0                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans   &kp T                                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans   &kp G                                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans   &kp B   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans   &none   &trans  &trans  &trans           &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &out OUT_BLE  &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
